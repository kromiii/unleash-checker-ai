name: 'Unleash Checker AI'
description: 'Checks and updates stale Unleash flags'
author: 'Hiroyuki Kuromiya'
inputs:
  unleash_api_endpoint:
    description: 'Unleash API endpoint'
    required: true
  unleash_api_token:
    description: 'Unleash API token'
    required: true
  unleash_project_id:
    description: 'Unleash project ID'
    required: true
  openai_api_key:
    description: 'OpenAI API key'
    required: true
  target_path:
    description: 'Path to the directory you want to run unleash-checker-ai in'
    required: false
    default: '.'
  github_token:
    description: 'GitHub token for creating pull requests'
    required: true
outputs:
  checker_output:
    description: 'Output from unleash-checker-ai'
    value: ${{ steps.unleash-checker.outputs.checker_output }}
runs:
  using: 'composite'
  steps:
    - name: Get latest release
      id: get_release
      shell: bash
      run: |
        OS=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
        ARCH=$(echo $RUNNER_ARCH | tr '[:upper:]' '[:lower:]')
        if [ "$ARCH" == "x64" ]; then
          ARCH="amd64"
        fi
        RELEASE_INFO=$(curl -s https://api.github.com/repos/kromiii/unleash-checker-ai/releases/latest)
        ASSET_URL=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name | contains(\"$OS\") and contains(\"$ARCH\")) | .browser_download_url")
        if [ -z "$ASSET_URL" ]; then
          echo "Error: No matching asset found for $OS-$ARCH"
          exit 1
        fi
        echo "asset_url=$ASSET_URL" >> $GITHUB_OUTPUT
        echo "version=$(echo "$RELEASE_INFO" | jq -r .tag_name)" >> $GITHUB_OUTPUT

    - name: Download unleash-checker-ai
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE
        mkdir -p unleash-checker-ai-tmp
        cd unleash-checker-ai-tmp
        wget ${{ steps.get_release.outputs.asset_url }} -O unleash-checker-ai.tar.gz
        tar -xzf unleash-checker-ai.tar.gz
        chmod +x unleash-checker-ai
        mv unleash-checker-ai ..
        cd ..
        rm -rf unleash-checker-ai-tmp

    - name: Run unleash-checker-ai
      id: unleash-checker
      shell: bash
      env:
        UNLEASH_API_ENDPOINT: ${{ inputs.unleash_api_endpoint }}
        UNLEASH_API_TOKEN: ${{ inputs.unleash_api_token }}
        UNLEASH_PROJECT_ID: ${{ inputs.unleash_project_id }}
        OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_REPO: ${{ github.event.repository.name }}
      run: |
        output=$(./unleash-checker-ai ${{ inputs.target_path }})
        echo "checker_output<<EOF" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        rm unleash-checker-ai
        if echo "$output" | grep -q "Error"; then
          echo "Error detected in unleash-checker-ai output"
          echo "$output"
          exit 1
        fi

branding:
  icon: 'check-circle'
  color: 'green'
